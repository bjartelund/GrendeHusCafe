@page "/orders"
@attribute [Authorize]
@using Context
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Context.CafeContext CafeContext

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Date</th>
                <th>Status</th>
                <th>Items</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.CreatedAt.ToString("g")</td>
                    <td>@order.Status</td>
                    <td>
                        <ul>
                            @foreach (var item in order.Items)
                            {
                                <li>@item.Product?.Name x @item.Quantity (@item.UnitPrice.ToString("C"))</li>
                            }
                        </ul>
                    </td>
                    <td>@order.Items.Sum(i => i.UnitPrice * i.Quantity).ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order>? orders;
    private string? userObjectId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userObjectId = user.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
        if (Guid.TryParse(userObjectId, out var userGuid))
        {
            orders = await CafeContext.Orders
                .Where(o => o.UserId == userGuid)
                .Include(o => o.Items)
                .ThenInclude(i => i.Product)
                .ToListAsync();
        }
        else
        {
            orders = new List<Order>();
        }
    }
}