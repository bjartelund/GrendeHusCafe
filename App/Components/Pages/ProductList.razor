@page "/products"
@attribute [Authorize]
@using Context
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject CafeContext CafeContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Products</PageTitle>

<h1>Products</h1>

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to Cart</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Cart</h2>
@if (cart.Count == 0)
{
    <p>Your cart is empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.Product.Price.ToString("C")</td>
                    <td>@($"{item.Product.Price * item.Quantity:C}")</td>
                </tr>
            }
        </tbody>
    </table>
    <h3>Total: @TotalSum.ToString("C")</h3>
    <button class="btn btn-success" @onclick="SubmitOrder">Submit Order</button>
    <button class="btn btn-danger" @onclick="ResetCart">Reset Cart</button>
}

@code {
    private List<Product>? products;
    private readonly List<CartItem> cart = [];
    private string? userObjectId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userObjectId = user.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;
        if (Guid.TryParse(userObjectId, out var userGuid))
        {
            products = await CafeContext.Products.Where(p => p.UserId == userGuid).ToListAsync();
        }
        else
        {
            products = new List<Product>();
        }
    }

    void AddToCart(Product product)
    {
        var item = cart.FirstOrDefault(ci => ci.Product.Id == product.Id);
        if (item != null)
        {
            item.Quantity++;
        }
        else
        {
            cart.Add(new CartItem { Product = product, Quantity = 1 });
        }
    }

    void SubmitOrder()
    {
        if (cart.Count == 0)
            return;

        if (!Guid.TryParse(userObjectId, out var userGuid))
        {
            // Optionally, show an error message or return
            return;
        }

        var order = new Order
        {
            CreatedAt = DateTime.UtcNow,
            Status = "Submitted",
            UserId = userGuid,
            Items = cart.Select(ci => new OrderItem
            {
                ProductId = ci.Product.Id,
                Quantity = ci.Quantity,
                UnitPrice = ci.Product.Price
            }).ToList()
        };
        CafeContext.Orders.Add(order);
        CafeContext.SaveChanges();
        cart.Clear();
    }

    void ResetCart()
    {
        cart.Clear();
    }

    decimal TotalSum => cart.Sum(ci => ci.Product.Price * ci.Quantity);

    class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }
}