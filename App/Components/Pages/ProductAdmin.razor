@page "/product-admin"
@attribute [Authorize]
@using Context
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject CafeContext CafeContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Product Admin</PageTitle>

<h1>Product Admin</h1>

<EditForm Model="newProduct" OnValidSubmit="AddProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="newProduct.Name" />
    </div>
    <div class="mb-3">
        <label>Description</label>
        <InputText class="form-control" @bind-Value="newProduct.Description" />
    </div>
    <div class="mb-3">
        <label>Price</label>
        <InputNumber class="form-control" @bind-Value="newProduct.Price" />
    </div>
    <div class="mb-3">
        <label>Available</label>
        <InputCheckbox class="form-check-input" @bind-Value="newProduct.Available" />
    </div>
    <button type="submit" class="btn btn-success">Add Product</button>
</EditForm>

@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
}

@if (products is { Count: > 0 })
{
    <h2>Your Products</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Available</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@(product.Available ? "Yes" : "No")</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ToggleAvailability(product)">
                            @(product.Available ? "Inactivate" : "Activate")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Product newProduct = new() { Name = string.Empty, Description = string.Empty };
    private string? successMessage;
    private string? userObjectId;
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {

        userObjectId   = await AuthHelper.GetUserId(AuthenticationStateProvider.GetAuthenticationStateAsync());

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        if (Guid.TryParse(userObjectId, out var userGuid))
        {
            products = await CafeContext.Products.Where(p => p.UserId == userGuid).ToListAsync();
        }
        else
        {
            products = new List<Product>();
        }
        StateHasChanged();
    }

    private async Task AddProduct()
    {
        if (Guid.TryParse(userObjectId, out var userGuid))
        {
            newProduct.UserId = userGuid;
            CafeContext.Products.Add(newProduct);
            await CafeContext.SaveChangesAsync();
            successMessage = $"Product '{newProduct.Name}' added!";
            newProduct = new() { Name = string.Empty, Description = string.Empty };
            await LoadProducts();
        }
        else
        {
            successMessage = "Could not determine user ID. Product was not saved.";
        }
    }

    private async Task ToggleAvailability(Product product)
    {
        product.Available = !product.Available;
        CafeContext.Products.Update(product);
        await CafeContext.SaveChangesAsync();
        await LoadProducts();
    }
}