@page "/Expenses"
<h3>Expenses</h3>

@using Context
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject CafeContext Db
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="expense" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Date:</label>
        <input type="datetime-local" class="form-control" @bind="expense.CreatedAt" />
    </div>
    <div class="mb-3">
        <label>Description:</label>
        <input type="text" class="form-control" @bind="expense.Description" />
    </div>
    <div class="mb-3">
        <label>Total:</label>
        <input type="number" step="0.01" class="form-control" @bind="expense.Total" />
    </div>
    <button type="submit" class="btn btn-primary">Add Expense</button>
</EditForm>

@if (userExpenses != null && userExpenses.Count > 0)
{
    <h4>Previous Expenses</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exp in userExpenses)
            {
                <tr>
                    <td>@exp.CreatedAt.ToString("g")</td>
                    <td>@exp.Description</td>
                    <td>@exp.Total.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Expense expense = new Expense
    {
        CreatedAt = DateTime.Now
    };
    private List<Expense> userExpenses = new();

    protected override async Task OnInitializedAsync()
    {
        var objectId = await AuthHelper.GetUserId(AuthenticationStateProvider.GetAuthenticationStateAsync());

        if (!string.IsNullOrWhiteSpace(objectId))
        {
            expense.UserId = objectId;
        }
        await LoadUserExpenses();
    }

    private async Task LoadUserExpenses()
    {
        if (!string.IsNullOrWhiteSpace(expense.UserId))
        {
            userExpenses = await Db.Expenses
                .Where(e => e.UserId == expense.UserId)
                .OrderByDescending(e => e.CreatedAt)
                .ToListAsync();
        }
        else
        {
            userExpenses = new();
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Db.Expenses.Add(expense);
        await Db.SaveChangesAsync();
        expense = new Expense { UserId = expense.UserId, CreatedAt = DateTime.Now };
        await LoadUserExpenses();
    }
}