@page "/worksession"
@using Context
@using Microsoft.EntityFrameworkCore
@inject CafeContext Db
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<h3>Add Work Session</h3>

<EditForm Model="workSession" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Start Time:</label>
        <input type="datetime-local" class="form-control" @bind="workSession.StartTime" />
    </div>
    <div class="mb-3">
        <label>End Time:</label>
        <input type="datetime-local" class="form-control" @bind="workSession.EndTime" />
    </div>
    <button type="submit" class="btn btn-primary">Add Work Session</button>
</EditForm>

@if (userSessions.Count > 0)
{
    <h4>Previous Work Sessions</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Hours</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var session in userSessions)
            {
                <tr>
                    <td>@session.StartTime.ToString("g")</td>
                    <td>@session.EndTime.ToString("g")</td>
                    <td>@GetSessionHours(session.StartTime, session.EndTime).ToString("F2")</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteSession(session.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private readonly WorkSession workSession = new WorkSession
    {
        StartTime = DateTime.Today.AddHours(11),
        EndTime = DateTime.Today.AddHours(14)
    };
    private List<WorkSession> userSessions = new();

    protected override async Task OnInitializedAsync()
    {
        var objectId = await AuthHelper.GetUserId(AuthenticationStateProvider.GetAuthenticationStateAsync());
        if (!string.IsNullOrWhiteSpace(objectId))
        {
            workSession.UserId = objectId;
        }
        await LoadUserSessions();
    }

    private async Task LoadUserSessions()
    {
        if (!string.IsNullOrWhiteSpace(workSession.UserId))
        {
            userSessions = await Db.WorkSessions
                .Where(ws => ws.UserId == workSession.UserId)
                .OrderByDescending(ws => ws.StartTime)
                .ToListAsync();
        }
        else
        {
            userSessions = new();
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Db.WorkSessions.Add(workSession);
        await Db.SaveChangesAsync();
        await LoadUserSessions();
    }

    private double GetSessionHours(DateTime start, DateTime end)
    {
        return (end - start).TotalHours;
    }

    private async Task DeleteSession(int sessionId)
    {
        var session = await Db.WorkSessions.FindAsync(sessionId);
        if (session != null && session.UserId == workSession.UserId)
        {
            Db.WorkSessions.Remove(session);
            await Db.SaveChangesAsync();
            await LoadUserSessions();
        }
    }
}